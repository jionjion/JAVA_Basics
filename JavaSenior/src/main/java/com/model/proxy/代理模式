分类:
	远程代理:为不同地理的对象提供局域网代理对象
	虚拟代理:根据需要将资源消耗很大的对象进行延迟,真正需要的时候再进行创
	保护代理:对保护功能的权限设置
	智能引用代理:提供对目标对象的额外的服务

实现:在原有方法上增加新功能.
	静态代理:代理和被代理对象在代理之前是确定的,他们都实现相同的接口或者继承相同的抽象类
		继承代理:通过继承进行代理
		聚合代理:通过实现进行代理
	动态代理:
		subject				  InvocationHandler  Subject									
	  ProxySubject -> Proxy -> ProxyHandler -> RealSubject
	  							    事务处理类
	  	JDK方式:	1.创建一个实现接口InvocationHandler的类,它必须实现invoke方法
	  			2.创建被代理的类及接口
	  			3.调用Proxy的静态方法,创建一个代理类
	  			4.通过代理类,调用方法
	  	CGLIB:	1.自定义一段源码
	  			2.生成文件,编译源码
	  			3.加载到内存中,返回对应对象
	  			4.创建对象,并返回
	  			5.注意用反编译工具完成对编译结果的校验
	  	区别:
	  		前者只能代理实现了接口的类,否则不能实现动态代理
	  		后者针对类实现代理,对目标类产生一个子类,通过方法拦截技术拦截所有父类方法的调用.不能对最终类实现代理
示例:
	一个汽车类,本身具有行驶的功能;我们通过代理,追加一个行驶计时功能.